// note-manager.js - Handles GHL contact notes operations
import axios from 'axios';

const GHL_BASE_URL = 'https://services.leadconnectorhq.com';
const GHL_API_VERSION = '2021-07-28';

// Function to create contact note in GHL
export async function createContactNote(contactId, noteBody, accessToken) {
    try {
        console.log('📤 Creating note for contact:', contactId);
        console.log('📏 Note length:', noteBody.length);
        
        const response = await axios.post(`${GHL_BASE_URL}/contacts/${contactId}/notes`, {
            body: noteBody
        }, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Version': GHL_API_VERSION,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('📨 Note API response status:', response.status);
        console.log('📄 Note created with ID:', response.data?.note?.id);
        
        return response.data;
    } catch (error) {
        console.error('❌ Error creating contact note:');
        console.error('   Status:', error.response?.status);
        console.error('   Status Text:', error.response?.statusText);
        console.error('   Data:', error.response?.data);
        console.error('   URL:', error.config?.url);
        throw error;
    }
}

// Function to generate call summary from VAPI data
export function generateCallSummary(callData, extractedData) {
    const { call, message } = callData;
    const callId = call?.id || 'unknown';
    
    console.log('🔍 Generating call summary with official VAPI structure');
    console.log('📋 Message keys:', Object.keys(message || {}));
    console.log('📋 Call keys:', Object.keys(call || {}));
    
    // Calculate duration
    let duration = 'Unknown';
    if (call?.startedAt && call?.endedAt) {
        const start = new Date(call.startedAt);
        const end = new Date(call.endedAt);
        const durationMs = end - start;
        const durationMinutes = Math.round(durationMs / 60000);
        duration = `${durationMinutes} minutes`;
    }
    
    // Get call date
    const callDate = call?.startedAt ? new Date(call.startedAt).toLocaleDateString() : new Date().toLocaleDateString();
    
    let summary = `VAPI Call Summary
Call ID: ${callId}
Duration: ${duration}
Date: ${callDate}
Phone: ${call?.customer?.number || 'Not available'}

`;

    // Use official VAPI summary from message.summary (official location per docs)
    const officialSummary = message?.summary || call?.analysis?.summary;
    if (officialSummary) {
        console.log('✅ Found official VAPI summary:', officialSummary.substring(0, 100) + '...');
        summary += `Call Summary:\n${officialSummary}\n\n`;
    }

    // Add key information extracted (only if we have any)
    if (extractedData && Object.keys(extractedData).length > 0) {
        summary += `Key Information Extracted:\n`;
        
        // Add extracted data in a readable format
        Object.entries(extractedData).forEach(([key, value]) => {
            if (value && value !== 'null' && value !== '') {
                const displayKey = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1').trim();
                summary += `• ${displayKey}: ${value}\n`;
            }
        });
        summary += '\n';
    }
    
    // Add enhanced audio reference with actual VAPI recording URL
    const audioUrl = getAudioRecordingUrl(callData);
    summary += `Audio Recording:\n`;
    if (audioUrl) {
        summary += `Audio File: ${audioUrl}\n`;
        summary += `Call ID: ${callId}\n`;
        summary += `Click link above to listen to full call recording\n\n`;
    } else {
        summary += `VAPI Call: https://vapi.ai/call/${callId}\n`;
        summary += `Call ID: ${callId}\n`;
        summary += `Contact VAPI support for audio file access\n\n`;
    }
    
    summary += `Generated by VAPI-GHL Integration`;
    
    return summary;
}

// Function to extract transcript text from call data
function getTranscriptText(callData) {
    const { call } = callData;
    
    console.log('🔍 Extracting transcript from call data...');
    console.log('📋 Call keys:', Object.keys(call || {}));
    
    // 1. Try direct transcript field first (test payloads and some VAPI calls)
    if (call?.transcript) {
        console.log('✅ Using direct transcript field:', call.transcript.substring(0, 50) + '...');
        return call.transcript;
    }
    
    // 2. Try transcript from messages array (newer VAPI format)
    if (call?.messages && Array.isArray(call.messages)) {
        console.log('🔍 Checking call.messages for transcript');
        const transcriptMessages = call.messages
            .filter(msg => msg.type === 'transcript' || (msg.role === 'user' && msg.message))
            .map(msg => msg.message || msg.content)
            .filter(text => text && text.trim().length > 5)
            .join(' ');
        
        if (transcriptMessages) {
            console.log('✅ Found transcript in messages:', transcriptMessages.substring(0, 50) + '...');
            return transcriptMessages;
        }
    }
    
    // 3. Try to extract from artifact messages (real VAPI calls)
    if (call?.artifact?.messages && Array.isArray(call.artifact.messages)) {
        console.log('🔍 Extracting transcript from artifact messages');
        
        // Look for user messages that contain the actual conversation
        const userMessages = call.artifact.messages
            .filter(msg => msg.role === 'user' && msg.message && msg.message.trim().length > 10)
            .map(msg => msg.message.trim())
            .join(' ');
        
        if (userMessages) {
            console.log('✅ Found transcript in artifact messages:', userMessages.substring(0, 50) + '...');
            return userMessages;
        }
        
        // Also try assistant messages for context
        const allMessages = call.artifact.messages
            .filter(msg => (msg.role === 'user' || msg.role === 'assistant') && msg.message)
            .map(msg => `${msg.role}: ${msg.message.trim()}`)
            .join('\n');
        
        if (allMessages) {
            console.log('✅ Found conversation in artifact messages');
            return allMessages;
        }
    }
    
    // 4. Try transcript array field (some VAPI formats)
    if (call?.transcript && Array.isArray(call.transcript)) {
        console.log('🔍 Processing transcript array');
        const transcriptText = call.transcript
            .map(item => item.text || item.message || item)
            .filter(text => typeof text === 'string' && text.trim().length > 5)
            .join(' ');
        
        if (transcriptText) {
            console.log('✅ Found transcript in array format:', transcriptText.substring(0, 50) + '...');
            return transcriptText;
        }
    }
    
    // 5. Fallback to analysis structured data for basic info
    if (call?.analysis?.structuredData) {
        console.log('⚠️ Using fallback from structured data');
        const data = call.analysis.structuredData;
        return `Contact provided information: Name: ${data.firstName || ''} ${data.lastName || ''}, Email: ${data.email || ''}, Phone: ${data.phone || ''}`;
    }
    
    console.log('❌ No transcript found in any expected format');
    return 'No transcript available';
}

// Function to extract audio recording URL from VAPI call data
function getAudioRecordingUrl(callData) {
    const { call, message } = callData;
    
    console.log('🔍 Extracting audio recording URL from VAPI data...');
    console.log('📋 Message keys for audio:', Object.keys(message || {}));
    console.log('📋 Call keys for audio:', Object.keys(call || {}));
    
    // 1. Try message level audio URLs (official webhook structure)
    if (message?.recordingUrl) {
        console.log('✅ Found audio URL in message.recordingUrl field:', message.recordingUrl);
        return message.recordingUrl;
    }
    
    if (message?.stereoRecordingUrl) {
        console.log('✅ Found audio URL in message.stereoRecordingUrl field:', message.stereoRecordingUrl);
        return message.stereoRecordingUrl;
    }
    
    // 2. Try call level direct recording URLs
    if (call?.recordingUrl) {
        console.log('✅ Found audio URL in call.recordingUrl field:', call.recordingUrl);
        return call.recordingUrl;
    }
    
    if (call?.stereoRecordingUrl) {
        console.log('✅ Found audio URL in call.stereoRecordingUrl field:', call.stereoRecordingUrl);
        return call.stereoRecordingUrl;
    }
    
    // 3. Try message analysis section
    if (message?.analysis?.recordingUrl) {
        console.log('✅ Found audio URL in message.analysis.recordingUrl:', message.analysis.recordingUrl);
        return message.analysis.recordingUrl;
    }
    
    if (message?.analysis?.stereoRecordingUrl) {
        console.log('✅ Found audio URL in message.analysis.stereoRecordingUrl:', message.analysis.stereoRecordingUrl);
        return message.analysis.stereoRecordingUrl;
    }
    
    // 4. Try artifact recordingUrl (newer format)
    if (call?.artifact?.recordingUrl) {
        console.log('✅ Found audio URL in call.artifact.recordingUrl:', call.artifact.recordingUrl);
        return call.artifact.recordingUrl;
    }
    
    if (call?.artifact?.stereoRecordingUrl) {
        console.log('✅ Found audio URL in call.artifact.stereoRecordingUrl:', call.artifact.stereoRecordingUrl);
        return call.artifact.stereoRecordingUrl;
    }
    
    // 5. Try recordings arrays (multiple recordings)
    const recordingsArrays = [
        message?.recordings,
        call?.recordings, 
        call?.artifact?.recordings,
        message?.analysis?.recordings
    ];
    
    for (const recordings of recordingsArrays) {
        if (recordings && Array.isArray(recordings) && recordings.length > 0) {
            const recording = recordings[0];
            if (recording?.url) {
                console.log('✅ Found audio URL in recordings array:', recording.url);
                return recording.url;
            }
            if (recording?.recordingUrl) {
                console.log('✅ Found audio URL in recordings[].recordingUrl:', recording.recordingUrl);
                return recording.recordingUrl;
            }
            if (recording?.stereoRecordingUrl) {
                console.log('✅ Found audio URL in recordings[].stereoRecordingUrl:', recording.stereoRecordingUrl);
                return recording.stereoRecordingUrl;
            }
        }
    }
    
    // 6. Try other possible fields
    if (call?.audio?.url) {
        console.log('✅ Found audio URL in call.audio.url field:', call.audio.url);
        return call.audio.url;
    }
    
    if (call?.audioUrl) {
        console.log('✅ Found audio URL in call.audioUrl field:', call.audioUrl);
        return call.audioUrl;
    }
    
    console.log('❌ No audio recording URL found in VAPI data');
    return null;
}

// Function to validate call data before creating notes
export function validateCallDataForNotes(callData) {
    const { call } = callData;
    const issues = [];
    
    console.log('🔍 Validating call data for note creation...');
    
    if (!call?.id) {
        issues.push('Missing call ID');
    }
    
    if (!call?.customer?.number && !call?.customer?.name) {
        issues.push('Missing customer information');
    }
    
    const transcript = getTranscriptText(callData);
    if (!transcript || transcript.trim().length < 5) {
        issues.push('No meaningful transcript found');
    }
    
    const validation = {
        isValid: issues.length === 0,
        issues: issues,
        callId: call?.id || 'Unknown',
        hasTranscript: !!transcript && transcript.trim().length > 5
    };
    
    console.log('📋 Validation result:', validation);
    return validation;
}

// Function to extract contact ID from VAPI call with improved logic
export function extractContactIdFromCall(call) {
    console.log('🔍 Extracting contact ID from call data...');
    
    // 1. Try assistant overrides first (most reliable for test cases)
    if (call?.assistantOverrides?.variableValues?.contactId) {
        const contactId = call.assistantOverrides.variableValues.contactId;
        console.log('✅ Found contact ID in assistant overrides:', contactId);
        return contactId;
    }
    
    // 2. Extract from artifact tool calls (real VAPI calls)
    if (call?.artifact?.messages && Array.isArray(call.artifact.messages)) {
        console.log('🔍 Searching artifact messages for contact ID...');
        
        // Look for create_contact tool call results
        for (const message of call.artifact.messages) {
            if (message.role === 'tool_call_result' && message.name === 'create_contact' && message.result) {
                try {
                    const resultData = typeof message.result === 'string' 
                        ? JSON.parse(message.result) 
                        : message.result;
                    
                    // Check for direct id field
                    if (resultData.id) {
                        console.log('✅ Found contact ID from create_contact result:', resultData.id);
                        return resultData.id;
                    }
                    
                    // Check for nested contact.id
                    if (resultData.contact?.id) {
                        console.log('✅ Found nested contact ID from create_contact result:', resultData.contact.id);
                        return resultData.contact.id;
                    }
                } catch (e) {
                    console.log('⚠️ Error parsing tool call result:', e.message);
                    continue;
                }
            }
        }
    }
    
    console.log('❌ No contact ID found in VAPI call data');
    return null;
}